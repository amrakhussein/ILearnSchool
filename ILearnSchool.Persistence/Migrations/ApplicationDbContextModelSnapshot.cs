// <auto-generated />
using System;
using ILearnSchool.Persistence.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ILearnSchool.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ILearnSchool.Core.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ILearnSchool.Core.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Grade")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PassingGrade")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DepartmentId = 1,
                            Description = "Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.",
                            Grade = 90,
                            Name = "Java",
                            PassingGrade = 60
                        },
                        new
                        {
                            Id = 2,
                            DepartmentId = 1,
                            Description = "Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.",
                            Grade = 80,
                            Name = "OOP",
                            PassingGrade = 60
                        },
                        new
                        {
                            Id = 3,
                            DepartmentId = 1,
                            Description = "Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.",
                            Grade = 75,
                            Name = "Networks",
                            PassingGrade = 60
                        },
                        new
                        {
                            Id = 4,
                            DepartmentId = 1,
                            Description = "Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.",
                            Grade = 79,
                            Name = "Data Structure",
                            PassingGrade = 60
                        },
                        new
                        {
                            Id = 5,
                            DepartmentId = 2,
                            Description = "Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.",
                            Grade = 50,
                            Name = "History of Art 1",
                            PassingGrade = 70
                        },
                        new
                        {
                            Id = 6,
                            DepartmentId = 2,
                            Description = "Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.",
                            Grade = 80,
                            Name = "History of Art 2",
                            PassingGrade = 70
                        },
                        new
                        {
                            Id = 7,
                            DepartmentId = 2,
                            Description = "Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.",
                            Grade = 60,
                            Name = "Art Movements",
                            PassingGrade = 50
                        },
                        new
                        {
                            Id = 8,
                            DepartmentId = 2,
                            Description = "Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.",
                            Grade = 40,
                            Name = "Art Appreciation",
                            PassingGrade = 50
                        },
                        new
                        {
                            Id = 9,
                            DepartmentId = 3,
                            Description = "Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.",
                            Grade = 90,
                            Name = "Corporate Finance",
                            PassingGrade = 60
                        },
                        new
                        {
                            Id = 10,
                            DepartmentId = 3,
                            Description = "Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.",
                            Grade = 80,
                            Name = "Financial Risk Management",
                            PassingGrade = 60
                        },
                        new
                        {
                            Id = 11,
                            DepartmentId = 3,
                            Description = "Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.",
                            Grade = 75,
                            Name = "Investment Analysis",
                            PassingGrade = 60
                        },
                        new
                        {
                            Id = 12,
                            DepartmentId = 3,
                            Description = "Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.",
                            Grade = 79,
                            Name = "Managerial Finance",
                            PassingGrade = 60
                        },
                        new
                        {
                            Id = 13,
                            DepartmentId = 4,
                            Description = "Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.",
                            Grade = 90,
                            Name = "Principles of Marketing",
                            PassingGrade = 60
                        },
                        new
                        {
                            Id = 14,
                            DepartmentId = 4,
                            Description = "Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.",
                            Grade = 80,
                            Name = "Entrepreneurship",
                            PassingGrade = 60
                        },
                        new
                        {
                            Id = 15,
                            DepartmentId = 4,
                            Description = "Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.",
                            Grade = 75,
                            Name = "Customer Psychology",
                            PassingGrade = 60
                        },
                        new
                        {
                            Id = 16,
                            DepartmentId = 4,
                            Description = "Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.",
                            Grade = 79,
                            Name = "The Art of Business",
                            PassingGrade = 60
                        });
                });

            modelBuilder.Entity("ILearnSchool.Core.Models.CourseInstructor", b =>
                {
                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("InstructorId")
                        .HasColumnType("int");

                    b.HasKey("CourseId", "InstructorId");

                    b.HasIndex("InstructorId");

                    b.ToTable("CourseInstructor");
                });

            modelBuilder.Entity("ILearnSchool.Core.Models.CourseResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("Grade")
                        .HasColumnType("int");

                    b.Property<int>("TraineeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("TraineeId");

                    b.ToTable("CourseResults");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CourseId = 1,
                            Grade = 85,
                            TraineeId = 1
                        },
                        new
                        {
                            Id = 2,
                            CourseId = 2,
                            Grade = 77,
                            TraineeId = 2
                        },
                        new
                        {
                            Id = 3,
                            CourseId = 3,
                            Grade = 92,
                            TraineeId = 2
                        },
                        new
                        {
                            Id = 4,
                            CourseId = 4,
                            Grade = 80,
                            TraineeId = 3
                        },
                        new
                        {
                            Id = 5,
                            CourseId = 5,
                            Grade = 88,
                            TraineeId = 1
                        },
                        new
                        {
                            Id = 6,
                            CourseId = 6,
                            Grade = 90,
                            TraineeId = 2
                        },
                        new
                        {
                            Id = 7,
                            CourseId = 7,
                            Grade = 78,
                            TraineeId = 3
                        },
                        new
                        {
                            Id = 8,
                            CourseId = 8,
                            Grade = 95,
                            TraineeId = 4
                        },
                        new
                        {
                            Id = 9,
                            CourseId = 9,
                            Grade = 83,
                            TraineeId = 1
                        },
                        new
                        {
                            Id = 10,
                            CourseId = 10,
                            Grade = 92,
                            TraineeId = 2
                        },
                        new
                        {
                            Id = 11,
                            CourseId = 11,
                            Grade = 88,
                            TraineeId = 3
                        },
                        new
                        {
                            Id = 12,
                            CourseId = 12,
                            Grade = 75,
                            TraineeId = 4
                        },
                        new
                        {
                            Id = 13,
                            CourseId = 13,
                            Grade = 85,
                            TraineeId = 1
                        },
                        new
                        {
                            Id = 14,
                            CourseId = 14,
                            Grade = 79,
                            TraineeId = 2
                        },
                        new
                        {
                            Id = 15,
                            CourseId = 15,
                            Grade = 93,
                            TraineeId = 3
                        },
                        new
                        {
                            Id = 16,
                            CourseId = 16,
                            Grade = 87,
                            TraineeId = 4
                        },
                        new
                        {
                            Id = 17,
                            CourseId = 1,
                            Grade = 87,
                            TraineeId = 4
                        },
                        new
                        {
                            Id = 18,
                            CourseId = 1,
                            Grade = 83,
                            TraineeId = 3
                        },
                        new
                        {
                            Id = 19,
                            CourseId = 1,
                            Grade = 82,
                            TraineeId = 2
                        });
                });

            modelBuilder.Entity("ILearnSchool.Core.Models.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium",
                            Name = "Computer Science"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium",
                            Name = "Arts"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium",
                            Name = "Finance"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium",
                            Name = "Business"
                        });
                });

            modelBuilder.Entity("ILearnSchool.Core.Models.Enrollment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<bool>("HasEnrolled")
                        .HasColumnType("bit");

                    b.Property<int>("TraineeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("TraineeId");

                    b.ToTable("Enrollments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CourseId = 1,
                            HasEnrolled = true,
                            TraineeId = 1
                        },
                        new
                        {
                            Id = 2,
                            CourseId = 2,
                            HasEnrolled = true,
                            TraineeId = 2
                        },
                        new
                        {
                            Id = 3,
                            CourseId = 3,
                            HasEnrolled = true,
                            TraineeId = 3
                        },
                        new
                        {
                            Id = 4,
                            CourseId = 4,
                            HasEnrolled = true,
                            TraineeId = 4
                        },
                        new
                        {
                            Id = 5,
                            CourseId = 5,
                            HasEnrolled = true,
                            TraineeId = 1
                        },
                        new
                        {
                            Id = 6,
                            CourseId = 6,
                            HasEnrolled = true,
                            TraineeId = 2
                        },
                        new
                        {
                            Id = 7,
                            CourseId = 7,
                            HasEnrolled = true,
                            TraineeId = 3
                        },
                        new
                        {
                            Id = 8,
                            CourseId = 8,
                            HasEnrolled = true,
                            TraineeId = 4
                        },
                        new
                        {
                            Id = 9,
                            CourseId = 9,
                            HasEnrolled = true,
                            TraineeId = 1
                        },
                        new
                        {
                            Id = 10,
                            CourseId = 10,
                            HasEnrolled = true,
                            TraineeId = 2
                        },
                        new
                        {
                            Id = 11,
                            CourseId = 11,
                            HasEnrolled = true,
                            TraineeId = 3
                        },
                        new
                        {
                            Id = 12,
                            CourseId = 12,
                            HasEnrolled = true,
                            TraineeId = 4
                        },
                        new
                        {
                            Id = 13,
                            CourseId = 13,
                            HasEnrolled = true,
                            TraineeId = 1
                        },
                        new
                        {
                            Id = 14,
                            CourseId = 14,
                            HasEnrolled = true,
                            TraineeId = 2
                        },
                        new
                        {
                            Id = 15,
                            CourseId = 15,
                            HasEnrolled = true,
                            TraineeId = 3
                        },
                        new
                        {
                            Id = 16,
                            CourseId = 16,
                            HasEnrolled = true,
                            TraineeId = 4
                        },
                        new
                        {
                            Id = 17,
                            CourseId = 1,
                            HasEnrolled = true,
                            TraineeId = 2
                        },
                        new
                        {
                            Id = 18,
                            CourseId = 1,
                            HasEnrolled = true,
                            TraineeId = 3
                        },
                        new
                        {
                            Id = 19,
                            CourseId = 1,
                            HasEnrolled = true,
                            TraineeId = 4
                        });
                });

            modelBuilder.Entity("ILearnSchool.Core.Models.Instructor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Instructors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Age = 30,
                            DepartmentId = 1,
                            FirstName = "Amr",
                            LastName = "Samy"
                        },
                        new
                        {
                            Id = 2,
                            Age = 35,
                            DepartmentId = 2,
                            FirstName = "Samy",
                            LastName = "Ramy"
                        },
                        new
                        {
                            Id = 3,
                            Age = 40,
                            DepartmentId = 3,
                            FirstName = "Jasmine",
                            LastName = "Ahmed"
                        },
                        new
                        {
                            Id = 4,
                            Age = 45,
                            DepartmentId = 4,
                            FirstName = "Ayman",
                            LastName = "Akram"
                        });
                });

            modelBuilder.Entity("ILearnSchool.Core.Models.Trainee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Trainees");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Age = 18,
                            DepartmentId = 1,
                            FirstName = "Laila",
                            LastName = "Mostapha"
                        },
                        new
                        {
                            Id = 2,
                            Age = 19,
                            DepartmentId = 2,
                            FirstName = "Ali",
                            LastName = "Ahemd"
                        },
                        new
                        {
                            Id = 3,
                            Age = 20,
                            DepartmentId = 3,
                            FirstName = "Omar",
                            LastName = "Taha"
                        },
                        new
                        {
                            Id = 4,
                            Age = 22,
                            DepartmentId = 4,
                            FirstName = "Akram",
                            LastName = "Samy"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "760901e7-7e08-4bdf-ab9a-4cd8b251ce1c",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "016f0e2d-566a-40b3-8c4a-a89d430a0309",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "db86c111-d3e4-4c07-a0f0-59a1ad43de58",
                            Name = "Guest",
                            NormalizedName = "GUEST"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ILearnSchool.Core.Models.Course", b =>
                {
                    b.HasOne("ILearnSchool.Core.Models.Department", "Department")
                        .WithMany("Courses")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("ILearnSchool.Core.Models.CourseInstructor", b =>
                {
                    b.HasOne("ILearnSchool.Core.Models.Course", "Course")
                        .WithMany("CourseInstructors")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ILearnSchool.Core.Models.Instructor", "Instructor")
                        .WithMany("CourseInstructors")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("ILearnSchool.Core.Models.CourseResult", b =>
                {
                    b.HasOne("ILearnSchool.Core.Models.Course", "Course")
                        .WithMany("CourseResults")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ILearnSchool.Core.Models.Trainee", "Trainee")
                        .WithMany("CourseResults")
                        .HasForeignKey("TraineeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Trainee");
                });

            modelBuilder.Entity("ILearnSchool.Core.Models.Enrollment", b =>
                {
                    b.HasOne("ILearnSchool.Core.Models.Course", "Course")
                        .WithMany("Enrollments")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ILearnSchool.Core.Models.Trainee", "Trainee")
                        .WithMany("Enrollments")
                        .HasForeignKey("TraineeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Trainee");
                });

            modelBuilder.Entity("ILearnSchool.Core.Models.Instructor", b =>
                {
                    b.HasOne("ILearnSchool.Core.Models.Department", "Department")
                        .WithMany("Instructors")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("ILearnSchool.Core.Models.Trainee", b =>
                {
                    b.HasOne("ILearnSchool.Core.Models.Department", "Department")
                        .WithMany("Trainees")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ILearnSchool.Core.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ILearnSchool.Core.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ILearnSchool.Core.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ILearnSchool.Core.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ILearnSchool.Core.Models.Course", b =>
                {
                    b.Navigation("CourseInstructors");

                    b.Navigation("CourseResults");

                    b.Navigation("Enrollments");
                });

            modelBuilder.Entity("ILearnSchool.Core.Models.Department", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("Instructors");

                    b.Navigation("Trainees");
                });

            modelBuilder.Entity("ILearnSchool.Core.Models.Instructor", b =>
                {
                    b.Navigation("CourseInstructors");
                });

            modelBuilder.Entity("ILearnSchool.Core.Models.Trainee", b =>
                {
                    b.Navigation("CourseResults");

                    b.Navigation("Enrollments");
                });
#pragma warning restore 612, 618
        }
    }
}
