// <auto-generated />
using System;
using ILearnSchool.Persistence.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ILearnSchool.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230615214540_UpdateDataSeedToCourseInstructorAndTrainees")]
    partial class UpdateDataSeedToCourseInstructorAndTrainees
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ILearnSchool.Core.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ILearnSchool.Core.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaxGrade")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PassingGrade")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DepartmentId = 1,
                            Description = "Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.",
                            MaxGrade = 100,
                            Name = "Course 1",
                            PassingGrade = 60
                        },
                        new
                        {
                            Id = 2,
                            DepartmentId = 2,
                            Description = "unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto",
                            MaxGrade = 100,
                            Name = "Course 2",
                            PassingGrade = 50
                        },
                        new
                        {
                            Id = 3,
                            DepartmentId = 3,
                            Description = "Sed ut perspiciatis unde omnis totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.",
                            MaxGrade = 100,
                            Name = "Course 3",
                            PassingGrade = 70
                        },
                        new
                        {
                            Id = 4,
                            DepartmentId = 4,
                            Description = "Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.",
                            MaxGrade = 100,
                            Name = "Course 4",
                            PassingGrade = 60
                        },
                        new
                        {
                            Id = 5,
                            DepartmentId = 1,
                            Description = "Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.",
                            MaxGrade = 100,
                            Name = "Course 5",
                            PassingGrade = 60
                        },
                        new
                        {
                            Id = 6,
                            DepartmentId = 2,
                            Description = "unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto",
                            MaxGrade = 100,
                            Name = "Course 6",
                            PassingGrade = 50
                        },
                        new
                        {
                            Id = 7,
                            DepartmentId = 3,
                            Description = "unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto",
                            MaxGrade = 100,
                            Name = "Course 7",
                            PassingGrade = 60
                        },
                        new
                        {
                            Id = 8,
                            DepartmentId = 4,
                            Description = "Sed ut perspiciatis unde omnis totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.",
                            MaxGrade = 100,
                            Name = "Course 8",
                            PassingGrade = 60
                        },
                        new
                        {
                            Id = 9,
                            DepartmentId = 1,
                            Description = "Sed ut perspiciatis unde omnis totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.",
                            MaxGrade = 100,
                            Name = "Course 9",
                            PassingGrade = 50
                        },
                        new
                        {
                            Id = 10,
                            DepartmentId = 2,
                            Description = "totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.",
                            MaxGrade = 100,
                            Name = "Course 10",
                            PassingGrade = 50
                        },
                        new
                        {
                            Id = 11,
                            DepartmentId = 3,
                            Description = "totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.",
                            MaxGrade = 100,
                            Name = "Course 11",
                            PassingGrade = 70
                        },
                        new
                        {
                            Id = 12,
                            DepartmentId = 4,
                            Description = "Sed ut perspiciatis unde omnis totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.",
                            MaxGrade = 100,
                            Name = "Course 12",
                            PassingGrade = 60
                        },
                        new
                        {
                            Id = 13,
                            DepartmentId = 1,
                            Description = "unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto",
                            MaxGrade = 100,
                            Name = "Course 13",
                            PassingGrade = 70
                        },
                        new
                        {
                            Id = 14,
                            DepartmentId = 2,
                            Description = "Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.",
                            MaxGrade = 100,
                            Name = "Course 14",
                            PassingGrade = 60
                        },
                        new
                        {
                            Id = 15,
                            DepartmentId = 3,
                            Description = "Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.",
                            MaxGrade = 100,
                            Name = "Course 15",
                            PassingGrade = 50
                        },
                        new
                        {
                            Id = 16,
                            DepartmentId = 4,
                            Description = "totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.",
                            MaxGrade = 100,
                            Name = "Course 16",
                            PassingGrade = 60
                        });
                });

            modelBuilder.Entity("ILearnSchool.Core.Models.CourseInstructor", b =>
                {
                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("InstructorId")
                        .HasColumnType("int");

                    b.HasKey("CourseId", "InstructorId");

                    b.HasIndex("InstructorId");

                    b.ToTable("CourseInstructor");

                    b.HasData(
                        new
                        {
                            CourseId = 1,
                            InstructorId = 1
                        },
                        new
                        {
                            CourseId = 2,
                            InstructorId = 1
                        },
                        new
                        {
                            CourseId = 3,
                            InstructorId = 2
                        },
                        new
                        {
                            CourseId = 4,
                            InstructorId = 2
                        },
                        new
                        {
                            CourseId = 5,
                            InstructorId = 3
                        },
                        new
                        {
                            CourseId = 6,
                            InstructorId = 3
                        },
                        new
                        {
                            CourseId = 7,
                            InstructorId = 4
                        },
                        new
                        {
                            CourseId = 8,
                            InstructorId = 4
                        },
                        new
                        {
                            CourseId = 9,
                            InstructorId = 5
                        },
                        new
                        {
                            CourseId = 10,
                            InstructorId = 5
                        },
                        new
                        {
                            CourseId = 11,
                            InstructorId = 6
                        },
                        new
                        {
                            CourseId = 12,
                            InstructorId = 6
                        },
                        new
                        {
                            CourseId = 13,
                            InstructorId = 7
                        },
                        new
                        {
                            CourseId = 14,
                            InstructorId = 7
                        },
                        new
                        {
                            CourseId = 15,
                            InstructorId = 8
                        },
                        new
                        {
                            CourseId = 16,
                            InstructorId = 8
                        });
                });

            modelBuilder.Entity("ILearnSchool.Core.Models.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium",
                            Name = "Computer Science"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium",
                            Name = "Arts"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium",
                            Name = "Finance"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium",
                            Name = "Business"
                        });
                });

            modelBuilder.Entity("ILearnSchool.Core.Models.Enrollment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<double>("Grade")
                        .HasColumnType("float");

                    b.Property<int>("TraineeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("TraineeId");

                    b.ToTable("Enrollments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CourseId = 1,
                            Grade = 60.0,
                            TraineeId = 1
                        },
                        new
                        {
                            Id = 2,
                            CourseId = 2,
                            Grade = 50.0,
                            TraineeId = 2
                        },
                        new
                        {
                            Id = 3,
                            CourseId = 3,
                            Grade = 40.0,
                            TraineeId = 3
                        },
                        new
                        {
                            Id = 4,
                            CourseId = 4,
                            Grade = 30.0,
                            TraineeId = 4
                        },
                        new
                        {
                            Id = 5,
                            CourseId = 5,
                            Grade = 77.0,
                            TraineeId = 1
                        },
                        new
                        {
                            Id = 6,
                            CourseId = 6,
                            Grade = 80.0,
                            TraineeId = 2
                        },
                        new
                        {
                            Id = 7,
                            CourseId = 7,
                            Grade = 90.0,
                            TraineeId = 3
                        },
                        new
                        {
                            Id = 8,
                            CourseId = 8,
                            Grade = 100.0,
                            TraineeId = 4
                        },
                        new
                        {
                            Id = 9,
                            CourseId = 9,
                            Grade = 86.299999999999997,
                            TraineeId = 1
                        },
                        new
                        {
                            Id = 10,
                            CourseId = 10,
                            Grade = 67.700000000000003,
                            TraineeId = 2
                        },
                        new
                        {
                            Id = 11,
                            CourseId = 11,
                            Grade = 97.5,
                            TraineeId = 3
                        },
                        new
                        {
                            Id = 12,
                            CourseId = 12,
                            Grade = 67.0,
                            TraineeId = 4
                        },
                        new
                        {
                            Id = 13,
                            CourseId = 13,
                            Grade = 88.0,
                            TraineeId = 1
                        },
                        new
                        {
                            Id = 14,
                            CourseId = 14,
                            Grade = 76.0,
                            TraineeId = 2
                        },
                        new
                        {
                            Id = 15,
                            CourseId = 15,
                            Grade = 65.0,
                            TraineeId = 3
                        },
                        new
                        {
                            Id = 16,
                            CourseId = 16,
                            Grade = 78.599999999999994,
                            TraineeId = 4
                        },
                        new
                        {
                            Id = 17,
                            CourseId = 1,
                            Grade = 55.0,
                            TraineeId = 2
                        },
                        new
                        {
                            Id = 18,
                            CourseId = 1,
                            Grade = 86.0,
                            TraineeId = 3
                        },
                        new
                        {
                            Id = 19,
                            CourseId = 1,
                            Grade = 76.799999999999997,
                            TraineeId = 4
                        },
                        new
                        {
                            Id = 20,
                            CourseId = 12,
                            Grade = 76.799999999999997,
                            TraineeId = 5
                        },
                        new
                        {
                            Id = 21,
                            CourseId = 13,
                            Grade = 76.799999999999997,
                            TraineeId = 6
                        },
                        new
                        {
                            Id = 22,
                            CourseId = 14,
                            Grade = 76.799999999999997,
                            TraineeId = 7
                        },
                        new
                        {
                            Id = 23,
                            CourseId = 3,
                            Grade = 76.799999999999997,
                            TraineeId = 8
                        },
                        new
                        {
                            Id = 24,
                            CourseId = 1,
                            Grade = 76.799999999999997,
                            TraineeId = 9
                        },
                        new
                        {
                            Id = 25,
                            CourseId = 2,
                            Grade = 76.799999999999997,
                            TraineeId = 10
                        });
                });

            modelBuilder.Entity("ILearnSchool.Core.Models.Instructor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Instructors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Age = 29,
                            DepartmentId = 1,
                            FirstName = "Jessica",
                            LastName = "Wilson"
                        },
                        new
                        {
                            Id = 2,
                            Age = 44,
                            DepartmentId = 2,
                            FirstName = "Robert",
                            LastName = "Sam"
                        },
                        new
                        {
                            Id = 3,
                            Age = 48,
                            DepartmentId = 3,
                            FirstName = "Isabella",
                            LastName = "Garcia"
                        },
                        new
                        {
                            Id = 4,
                            Age = 48,
                            DepartmentId = 4,
                            FirstName = "Daniel",
                            LastName = "Miller"
                        },
                        new
                        {
                            Id = 5,
                            Age = 38,
                            DepartmentId = 1,
                            FirstName = "Joseph",
                            LastName = "Jackson"
                        },
                        new
                        {
                            Id = 6,
                            Age = 39,
                            DepartmentId = 2,
                            FirstName = "David",
                            LastName = "Brown"
                        },
                        new
                        {
                            Id = 7,
                            Age = 38,
                            DepartmentId = 3,
                            FirstName = "Daniel",
                            LastName = "Miller"
                        },
                        new
                        {
                            Id = 8,
                            Age = 41,
                            DepartmentId = 4,
                            FirstName = "Jane",
                            LastName = "Johnson"
                        });
                });

            modelBuilder.Entity("ILearnSchool.Core.Models.Trainee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Trainees");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Age = 20,
                            DepartmentId = 1,
                            EnrollmentDate = new DateTime(2023, 6, 16, 0, 45, 39, 761, DateTimeKind.Local).AddTicks(2718),
                            FirstName = "David",
                            LastName = "Brown"
                        },
                        new
                        {
                            Id = 2,
                            Age = 30,
                            DepartmentId = 2,
                            EnrollmentDate = new DateTime(2023, 6, 16, 0, 45, 39, 761, DateTimeKind.Local).AddTicks(2759),
                            FirstName = "Joseph",
                            LastName = "Jackson"
                        },
                        new
                        {
                            Id = 3,
                            Age = 22,
                            DepartmentId = 3,
                            EnrollmentDate = new DateTime(2023, 6, 16, 0, 45, 39, 761, DateTimeKind.Local).AddTicks(2782),
                            FirstName = "John",
                            LastName = "Smith"
                        },
                        new
                        {
                            Id = 4,
                            Age = 18,
                            DepartmentId = 4,
                            EnrollmentDate = new DateTime(2023, 6, 16, 0, 45, 39, 761, DateTimeKind.Local).AddTicks(2786),
                            FirstName = "Christopher",
                            LastName = "Thompson"
                        },
                        new
                        {
                            Id = 5,
                            Age = 32,
                            DepartmentId = 1,
                            EnrollmentDate = new DateTime(2023, 6, 16, 0, 45, 39, 761, DateTimeKind.Local).AddTicks(2790),
                            FirstName = "Sarah",
                            LastName = "Davis"
                        },
                        new
                        {
                            Id = 6,
                            Age = 33,
                            DepartmentId = 2,
                            EnrollmentDate = new DateTime(2023, 6, 16, 0, 45, 39, 761, DateTimeKind.Local).AddTicks(2798),
                            FirstName = "Michael",
                            LastName = "Williams"
                        },
                        new
                        {
                            Id = 7,
                            Age = 23,
                            DepartmentId = 3,
                            EnrollmentDate = new DateTime(2023, 6, 16, 0, 45, 39, 761, DateTimeKind.Local).AddTicks(2802),
                            FirstName = "Daniel",
                            LastName = "Miller"
                        },
                        new
                        {
                            Id = 8,
                            Age = 20,
                            DepartmentId = 4,
                            EnrollmentDate = new DateTime(2023, 6, 16, 0, 45, 39, 761, DateTimeKind.Local).AddTicks(2806),
                            FirstName = "Matthew",
                            LastName = "Harris"
                        },
                        new
                        {
                            Id = 9,
                            Age = 27,
                            DepartmentId = 1,
                            EnrollmentDate = new DateTime(2023, 6, 16, 0, 45, 39, 761, DateTimeKind.Local).AddTicks(2809),
                            FirstName = "Olivia",
                            LastName = "Taylor"
                        },
                        new
                        {
                            Id = 10,
                            Age = 18,
                            DepartmentId = 2,
                            EnrollmentDate = new DateTime(2023, 6, 16, 0, 45, 39, 761, DateTimeKind.Local).AddTicks(2815),
                            FirstName = "Olivia",
                            LastName = "Taylor"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "2fd7a724-f043-43ca-b5fd-a3ddd2fa8517",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "5a886c81-8dc5-440d-964b-0c165be4a25a",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "0f3b0c04-2a9e-4a23-b7a0-9604bb931f0f",
                            Name = "Guest",
                            NormalizedName = "GUEST"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ILearnSchool.Core.Models.Course", b =>
                {
                    b.HasOne("ILearnSchool.Core.Models.Department", "Department")
                        .WithMany("Courses")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("ILearnSchool.Core.Models.CourseInstructor", b =>
                {
                    b.HasOne("ILearnSchool.Core.Models.Course", "Course")
                        .WithMany("CourseInstructors")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ILearnSchool.Core.Models.Instructor", "Instructor")
                        .WithMany("CourseInstructors")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("ILearnSchool.Core.Models.Enrollment", b =>
                {
                    b.HasOne("ILearnSchool.Core.Models.Course", "Course")
                        .WithMany("Enrollments")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ILearnSchool.Core.Models.Trainee", "Trainee")
                        .WithMany("Enrollments")
                        .HasForeignKey("TraineeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Trainee");
                });

            modelBuilder.Entity("ILearnSchool.Core.Models.Instructor", b =>
                {
                    b.HasOne("ILearnSchool.Core.Models.Department", "Department")
                        .WithMany("Instructors")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("ILearnSchool.Core.Models.Trainee", b =>
                {
                    b.HasOne("ILearnSchool.Core.Models.Department", "Department")
                        .WithMany("Trainees")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ILearnSchool.Core.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ILearnSchool.Core.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ILearnSchool.Core.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ILearnSchool.Core.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ILearnSchool.Core.Models.Course", b =>
                {
                    b.Navigation("CourseInstructors");

                    b.Navigation("Enrollments");
                });

            modelBuilder.Entity("ILearnSchool.Core.Models.Department", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("Instructors");

                    b.Navigation("Trainees");
                });

            modelBuilder.Entity("ILearnSchool.Core.Models.Instructor", b =>
                {
                    b.Navigation("CourseInstructors");
                });

            modelBuilder.Entity("ILearnSchool.Core.Models.Trainee", b =>
                {
                    b.Navigation("Enrollments");
                });
#pragma warning restore 612, 618
        }
    }
}
